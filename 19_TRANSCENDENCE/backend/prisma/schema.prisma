// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Connexion process 
  id                     String   @id @unique @default(uuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  twoFactorAuthSecret    String?
  isTwoFactorAuthEnabled Boolean  @default(false)

  // Profile process
  intraId   Int    @unique
  email42   String @unique
  login     String @unique @db.VarChar(12)
  firstName String
  lastName  String
  avatar    String
  wins      Int    @default(0)
  losses    Int    @default(0)

  status UserStatus @default(ONLINE)

  // Relation to other tables
  statusWebSocketId UserStatusWebSocketId[]
  members           ChannelMember[]
  message           Message[]
  blocked           User[]                  @relation("UserBlock")
  blockedOf         User[]                  @relation("UserBlock")
  friends           User[]                  @relation("UserFriends")
  friendOf          User[]                  @relation("UserFriends")

  historyGamesWon  GameHistory[] @relation("WinningUser")
  historyGamesLost GameHistory[] @relation("LosingUser")
}

model UserStatusWebSocketId {
  id String @id @unique @default(uuid())

  user        User   @relation(fields: [userId], references: [id])
  userId      String
  webSocketId String @unique
}

model GameHistory {
  id       String   @id @unique @default(uuid())
  playedAt DateTime @default(now())

  WinningUser      User   @relation("WinningUser", fields: [WinningUserId], references: [id])
  WinningUserId    String
  WinningUserScore Int

  LosingUser      User   @relation("LosingUser", fields: [LosingUserId], references: [id])
  LosingUserId    String
  LosingUserScore Int
}

model Channel {
  id        Int             @id @unique @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  name      String          @unique
  password  String?
  private   Boolean         @default(false)
  isDual    Boolean         @default(false)

  members   ChannelMember[]
  messages  Message[]
}

model ChannelMember {
  id Int @id @unique @default(autoincrement())

  userId    Int
  channelId Int
  user      User    @relation(fields: [userId], references: [intraId])
  channel   Channel @relation(fields: [channelId], references: [id])

  muteEnd DateTime @default(now())
  isMute  Boolean  @default(false)
  isBan   Boolean  @default(false)
  isAdmin Boolean  @default(false)
  isOwner Boolean  @default(false)

  @@unique([userId, channelId])
}

model Message {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())

  userId    Int
  channelId Int
  member    User    @relation(fields: [userId], references: [intraId])
  channel   Channel @relation(fields: [channelId], references: [id])

  content String
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
  END_PLAYING
  LOGOUT
}
