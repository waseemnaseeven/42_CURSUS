		CE QU'IL FAUT RETENIR DE PUSH_SWAP

La médiane est le point milieu d'un jeu de données,
de sorte que 50 % des unités ont une valeur inférieure
ou égale à la médiane et 50 % des unités ont
une valeur supérieure ou égale.


Commandes : 

	ARG=`ruby -e "puts (1..$1).to_a.shuffle.join(' ')"`
Les differents algo de tri :
	- insertion sort :

	- Selection Sort :

	- Bubble sort :

	- Quick Sort :


Le calcul de prix :
	Implementation en gros : 
		Si la valeur de la pile_b[i] est > au max de la pile_a
			alors la valeur de la pile_b[i] doit se mettre derriere le min(a)
		Sinon
			la valeur de la pile_b[i] doit pointer sur la valeur la plus proche d'elle au superieur
	- Calcul de la mediane =
		- creation d'un tableau tmp qu'aura trie 
		- puis calcule de la mediane
			Si les valeurs sont au dessus de la mediane = pb 
			Sinon = ra, ca veut dire qu'on doit garder la valeur car basse
		- jusqu'a avoir trois valeur = sort three
		
	- la pile B = 
		
		
		On va chercher a PA que les coups qui ne coute qu'1$, sinon on fait des RR, RRR,

	- Pushmin = on ne fait que des RA ou RRA pour terminer
			- RRA si la valeur minimum de A est superieur a la moitie de la taille de A
				ex : liste 0-10 :
			- (souvent la valeur minimum est inferieur) RA si la valmin est inferieur
				ex : z
			

I- Parsing
	A- checking 
		- split argv
		- check sign
		- check minmax
		- checkdouble
	B- filled array
	C- Check if sorted array
	

II- Sort Algorithm
	A- Sort two
		sa
	B- Sort three
		- 2 1 3
		- 3 2 1
		- 3 1 2
		- 1 3 2
		- 2 3 1
	C- Sort Five
	D- Sort Big Stack



Momo explication : 
/*

Si la valeur de pile_b[i] est > au max(pile_a)
    alors pile_b[i] doit se mettre deriere le min(a)
sinon
    la valeur de pile_b[i] doit pointer sur la valeur la plus proche d'elle au superieur



0	4   	9	2$ ra + pa
1	-5	    2	2$ rb + pa
2	0	    3	3$ rb + rb + pa
3	1	    5	4$ rrb + ra;
4	PILE A	PILE B	4

1 coup

0	4
1	9
2	-5	    2	1$ pa
3	0	    3	2$ ra + pa
4	1	    5	2$ rrb + ra
5	PILE A	PILE B	3

*/

///* ***** Partie qui fonctionne ***** */

//int		forthemoves(t_stack *a, t_stack *b, int	tab_index[5])
//{
//	if (tab_index[0] == 0)
//		return (ft_p(a, b, 'a', b->lst));
//	while (tab_index[1] > 0)
//	{
//		if (tab_index[2] > 0)
//			ft_rrrotate(a, b, tab_index[2]--, 0);
//		else
//			ft_rr(a, 'a', tab_index[1]);
//		tab_index[1]--;
//	}
//	while (tab_index[2] > 0)
//		ft_rr(b, 'b', tab_index[2]--);
//	while (tab_index[1] < 0)
//	{
//		if (tab_index[2] < 0)
//			ft_rrotate(a, b, tab_index[2]++, 0);
//		else
//			ft_r(a, 'a', tab_index[1]);
//		tab_index[1]++;
//	}
//	while (tab_index[2] < 0)
//		ft_r(b, 'b', tab_index[2]++);
//	return (ft_p(a, b, 'a', b->lst));
//}



//void	ft_calculprice(t_stack *a, t_stack *b)
//{
//	int		tab_index[5];
//	int		i;
//	int		valsup;
//	int		*total;

//	total = malloc(sizeof(int) * b->size);
//	if (!total)
//		ft_exit(a, b);
//	while (b->size != 0)
//	{
//		i = -1;
//		tab_index[0] = 999999999;
//		while (++i < b->size)
//		{
//			tab_index[3] = ft_getvalue(b,i);
//			valsup = ft_valsup(a, b, i);
//			tab_index[4] = ft_getvalue(a, valsup);
//			total[i] = ft_calcultotal(tab_index[3], tab_index[4]);
//			if (tab_index[0] > total[i])
//			{
//				tab_index[0] = total[i];
//				tab_index[1] = tab_index[4];
//				tab_index[2] = tab_index[3];
//			}
//		}
//		forthemoves(a, b, tab_index);
//	}
//	free(total);
//}
